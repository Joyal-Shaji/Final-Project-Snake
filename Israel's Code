# Initialize bonus food (set initially to None)
bonus_food = None

# Add a function to spawn bonus food randomly
def spawn_bonus_food():
    global bonus_food
    bonus_food = block(random.randint(0, columns - 1) * tileSize, random.randint(0, rows - 1) * tileSize)

# Add a condition to check if the snake collides with bonus food
def check_bonus_food_collision():
    global score, bonus_food
    if bonus_food and snake.x == bonus_food.x and snake.y == bonus_food.y:
        score += 3  # Bonus food gives 3 points
        bonus_food = None  # Remove the bonus food after it's eaten
        spawn_bonus_food()  # Spawn new bonus food

# Modify the draw function to include drawing and collision for bonus food
def draw():
    global snake, bonus_food
    moveSnake()
    
    canvas.delete("all")  # clears the non significant squares being created on each move

    # Draw the score and level
    canvas.create_text(10, 10, anchor="nw", text=f"Score: {score}", font=("Arial", 16), fill="black")
    canvas.create_text(window_size // 2, 10, anchor="n", text=f"Level: {level}", font=("Arial", 16), fill="black")

    # Draw the food
    canvas.create_rectangle(food.x, food.y, food.x + tileSize, food.y + tileSize, fill="red")

    # Draw the bonus food
    if bonus_food:
        canvas.create_oval(bonus_food.x, bonus_food.y, bonus_food.x + tileSize, bonus_food.y + tileSize, fill="yellow")

    # Draw the snake
    canvas.create_rectangle(snake.x, snake.y, snake.x + tileSize, snake.y + tileSize, fill="lime green")

    for tile in snakeBody:
        canvas.create_rectangle(tile.x, tile.y, tile.x + tileSize, tile.y + tileSize, fill="lime green")

    # Check if the snake eats bonus food
    check_bonus_food_collision()

    if not endGame:
        window.after(speed, draw)  # draws the rectangle every X ms (speed control)
